// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.17929
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TdService.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Shopper Orders")]
    [NUnit.Framework.CategoryAttribute("orders")]
    public partial class ShopperOrdersFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ShopperOrders.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Shopper Orders", "In order to let operator know about incoming orders\r\nAs a shopper\r\nI want to be a" +
                    "ble to add new orders, remove them and update with tracking number and order num" +
                    "ber", ProgrammingLanguage.CSharp, new string[] {
                        "orders"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add new order")]
        [NUnit.Framework.CategoryAttribute("addorder")]
        public virtual void AddNewOrder()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add new order", new string[] {
                        "addorder"});
#line 8
this.ScenarioSetup(scenarioInfo);
#line 9
 testRunner.Given("there is \'v.hatalski@gmail.com\' account with \'ruinruin\' password in role \'Shopper" +
                    "\' with fullname \'Vitali\' and \'Hatalski\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 10
 testRunner.And("I am authenticated as \'v.hatalski@gmail.com\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
 testRunner.When("I set retailer url as \'amazon.com\' and press add order button on shopper dashboar" +
                    "d page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Retailer Url",
                        "Order Number",
                        "Tracking Number",
                        "Received Date",
                        "Status",
                        "Can Be Modified",
                        "Can Be Removed",
                        "Can Be Requested For Return",
                        "Can Items Be Modified",
                        "Message Type"});
            table1.AddRow(new string[] {
                        "1",
                        "amazon.com",
                        "",
                        "",
                        "",
                        "New",
                        "True",
                        "True",
                        "False",
                        "True",
                        "Success"});
#line 12
 testRunner.Then("the order view model should be as follows", ((string)(null)), table1, "Then ");
#line 15
 testRunner.And("the order view model should have Created Date that is earlier than UTC Now", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate retailer url is required when adding new order")]
        [NUnit.Framework.CategoryAttribute("addorder")]
        public virtual void ValidateRetailerUrlIsRequiredWhenAddingNewOrder()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate retailer url is required when adding new order", new string[] {
                        "addorder"});
#line 18
this.ScenarioSetup(scenarioInfo);
#line 19
 testRunner.Given("there is \'v.hatalski@gmail.com\' account with \'ruinruin\' password in role \'Shopper" +
                    "\' with fullname \'Vitali\' and \'Hatalski\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 20
 testRunner.And("I am authenticated as \'v.hatalski@gmail.com\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 21
 testRunner.When("I set retailer url as \'\' and press add order button on shopper dashboard page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Retailer Url",
                        "Order Number",
                        "Tracking Number",
                        "Received Date",
                        "Status",
                        "Can Be Modified",
                        "Can Be Removed",
                        "Can Be Requested For Return",
                        "Can Items Be Modified",
                        "Message Type"});
            table2.AddRow(new string[] {
                        "0",
                        "",
                        "",
                        "",
                        "",
                        "New",
                        "False",
                        "False",
                        "False",
                        "False",
                        "Warning"});
#line 22
 testRunner.Then("the order view model should be as follows", ((string)(null)), table2, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Error Code"});
            table3.AddRow(new string[] {
                        "RetailerUrl",
                        "OrderRetailerRequired"});
#line 25
 testRunner.And("the order view model should have the following errors", ((string)(null)), table3, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Remove order in new status")]
        [NUnit.Framework.CategoryAttribute("removeorder")]
        public virtual void RemoveOrderInNewStatus()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Remove order in new status", new string[] {
                        "removeorder"});
#line 30
this.ScenarioSetup(scenarioInfo);
#line 31
 testRunner.Given("there is \'v.hatalski@gmail.com\' account with \'ruinruin\' password in role \'Shopper" +
                    "\' with fullname \'Vitali\' and \'Hatalski\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 32
 testRunner.And("I am authenticated as \'v.hatalski@gmail.com\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Retailer Url",
                        "Order Number",
                        "Tracking Number",
                        "Received Date",
                        "Status"});
            table4.AddRow(new string[] {
                        "1",
                        "amazon.com",
                        "",
                        "",
                        "",
                        "New"});
#line 33
 testRunner.And("I have the following orders", ((string)(null)), table4, "And ");
#line 36
 testRunner.When("I remove order with id \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Retailer Url",
                        "Order Number",
                        "Tracking Number",
                        "Received Date",
                        "Status",
                        "Message Type"});
            table5.AddRow(new string[] {
                        "1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "Success"});
#line 37
 testRunner.Then("the order view model should be as follows", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Remove order that does not exist")]
        [NUnit.Framework.CategoryAttribute("removeorder")]
        public virtual void RemoveOrderThatDoesNotExist()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Remove order that does not exist", new string[] {
                        "removeorder"});
#line 42
this.ScenarioSetup(scenarioInfo);
#line 43
 testRunner.Given("there is \'v.hatalski@gmail.com\' account with \'ruinruin\' password in role \'Shopper" +
                    "\' with fullname \'Vitali\' and \'Hatalski\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 44
 testRunner.And("I am authenticated as \'v.hatalski@gmail.com\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Retailer Url",
                        "Order Number",
                        "Tracking Number",
                        "Received Date",
                        "Status"});
            table6.AddRow(new string[] {
                        "1",
                        "amazon.com",
                        "",
                        "",
                        "",
                        "New"});
#line 45
 testRunner.And("I have the following orders", ((string)(null)), table6, "And ");
#line 48
 testRunner.When("I remove order with id \'2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Retailer Url",
                        "Order Number",
                        "Tracking Number",
                        "Received Date",
                        "Status",
                        "Message Type",
                        "Error Code"});
            table7.AddRow(new string[] {
                        "2",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "Error",
                        "OrderNotBelongToUser"});
#line 49
 testRunner.Then("the order view model should be as follows", ((string)(null)), table7, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
