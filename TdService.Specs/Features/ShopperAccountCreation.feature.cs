// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.17929
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TdService.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Shopper Account Creation")]
    [NUnit.Framework.CategoryAttribute("signup")]
    public partial class ShopperAccountCreationFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ShopperAccountCreation.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Shopper Account Creation", "In order to start using ShopAnyWare service\r\nAs an anonymous user\r\nI want to be a" +
                    "ble to register as a shopper and activate my personal account", ProgrammingLanguage.CSharp, new string[] {
                        "signup"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create new account")]
        public virtual void CreateNewAccount()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create new account", ((string[])(null)));
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I have not been authenticated yet", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Email",
                        "Password",
                        "Password Confirm",
                        "First Name",
                        "Last Name"});
            table1.AddRow(new string[] {
                        "hautama@tut.by",
                        "ruinruin",
                        "ruinruin",
                        "Vitali",
                        "Hatalski"});
#line 9
 testRunner.When("I fill sign up form with the following data", ((string)(null)), table1, "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Email",
                        "First Name",
                        "Last Name",
                        "Activated",
                        "Message Type"});
            table2.AddRow(new string[] {
                        "hautama@tut.by",
                        "Vitali",
                        "Hatalski",
                        "false",
                        "Success"});
#line 12
 testRunner.Then("I should have the result as follows", ((string)(null)), table2, "Then ");
#line 15
 testRunner.And("activation code should be generated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Account already exists")]
        public virtual void AccountAlreadyExists()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Account already exists", ((string[])(null)));
#line 17
this.ScenarioSetup(scenarioInfo);
#line 18
 testRunner.Given("I have not been authenticated yet", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 19
 testRunner.And("The \'vhatalski@naviam.com\' account already exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Email",
                        "Password",
                        "Password Confirm",
                        "First Name",
                        "Last Name"});
            table3.AddRow(new string[] {
                        "vhatalski@naviam.com",
                        "ruinruin",
                        "ruinruin",
                        "Vitali",
                        "Hatalski"});
#line 20
 testRunner.When("I fill sign up form with the following data", ((string)(null)), table3, "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Email",
                        "First Name",
                        "Last Name",
                        "Message Type"});
            table4.AddRow(new string[] {
                        "vhatalski@naviam.com",
                        "Vitali",
                        "Hatalski",
                        "Error"});
#line 23
 testRunner.Then("I should have the result as follows", ((string)(null)), table4, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Error Code"});
            table5.AddRow(new string[] {
                        "Email",
                        "UserEmailExists"});
#line 26
 testRunner.And("the signup view model should have following errors", ((string)(null)), table5, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Email and password are required")]
        public virtual void EmailAndPasswordAreRequired()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Email and password are required", ((string[])(null)));
#line 30
this.ScenarioSetup(scenarioInfo);
#line 31
 testRunner.Given("I have not been authenticated yet", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Email",
                        "Password",
                        "Password Confirm",
                        "First Name",
                        "Last Name"});
            table6.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "Vitali",
                        "Hatalski"});
#line 32
 testRunner.When("I fill sign up form with the following data", ((string)(null)), table6, "When ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Email",
                        "First Name",
                        "Last Name",
                        "Message Type"});
            table7.AddRow(new string[] {
                        "",
                        "Vitali",
                        "Hatalski",
                        "Error"});
#line 35
 testRunner.Then("I should have the result as follows", ((string)(null)), table7, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Error Code"});
            table8.AddRow(new string[] {
                        "Password",
                        "UserPasswordRequired"});
            table8.AddRow(new string[] {
                        "Email",
                        "UserEmailRequired"});
            table8.AddRow(new string[] {
                        "PasswordConfirm",
                        "UserPasswordConfirmRequired"});
#line 38
 testRunner.And("the signup view model should have following errors", ((string)(null)), table8, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("First and Last names are required")]
        public virtual void FirstAndLastNamesAreRequired()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("First and Last names are required", ((string[])(null)));
#line 44
this.ScenarioSetup(scenarioInfo);
#line 45
 testRunner.Given("I have not been authenticated yet", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Email",
                        "Password",
                        "Password Confirm",
                        "First Name",
                        "Last Name"});
            table9.AddRow(new string[] {
                        "hautama@tut.by",
                        "ruinruin",
                        "ruinruin",
                        "",
                        ""});
#line 46
 testRunner.When("I fill sign up form with the following data", ((string)(null)), table9, "When ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Email",
                        "First Name",
                        "Last Name",
                        "Message Type"});
            table10.AddRow(new string[] {
                        "hautama@tut.by",
                        "",
                        "",
                        "Error"});
#line 49
 testRunner.Then("I should have the result as follows", ((string)(null)), table10, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Error Code"});
            table11.AddRow(new string[] {
                        "FirstName",
                        "ProfileFirstNameRequired"});
            table11.AddRow(new string[] {
                        "LastName",
                        "ProfileLastNameRequired"});
#line 52
 testRunner.And("the signup view model should have following errors", ((string)(null)), table11, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("First and Last names should be less than 21 chars")]
        public virtual void FirstAndLastNamesShouldBeLessThan21Chars()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("First and Last names should be less than 21 chars", ((string[])(null)));
#line 57
this.ScenarioSetup(scenarioInfo);
#line 58
 testRunner.Given("I have not been authenticated yet", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Email",
                        "Password",
                        "Password Confirm",
                        "First Name",
                        "Last Name"});
            table12.AddRow(new string[] {
                        "hautama@tut.by",
                        "ruinruin",
                        "ruinruin",
                        "First name longer than 21 chars",
                        "Last name longer than 21 chars"});
#line 59
 testRunner.When("I fill sign up form with the following data", ((string)(null)), table12, "When ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Email",
                        "First Name",
                        "Last Name",
                        "Message Type"});
            table13.AddRow(new string[] {
                        "hautama@tut.by",
                        "First name longer than 21 chars",
                        "Last name longer than 21 chars",
                        "Error"});
#line 62
 testRunner.Then("I should have the result as follows", ((string)(null)), table13, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Error Code"});
            table14.AddRow(new string[] {
                        "FirstName",
                        "ProfileFirstNameMaxLength"});
            table14.AddRow(new string[] {
                        "LastName",
                        "ProfileLastNameMaxLength"});
#line 65
 testRunner.And("the signup view model should have following errors", ((string)(null)), table14, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Email is invalid")]
        public virtual void EmailIsInvalid()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Email is invalid", ((string[])(null)));
#line 70
this.ScenarioSetup(scenarioInfo);
#line 71
 testRunner.Given("I have not been authenticated yet", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Email",
                        "Password",
                        "Password Confirm",
                        "First Name",
                        "Last Name"});
            table15.AddRow(new string[] {
                        "hautamatut.by",
                        "ruinruin",
                        "ruinruin",
                        "Vitali",
                        "Hatalski"});
#line 72
 testRunner.When("I fill sign up form with the following data", ((string)(null)), table15, "When ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Email",
                        "First Name",
                        "Last Name",
                        "Message Type"});
            table16.AddRow(new string[] {
                        "hautamatut.by",
                        "Vitali",
                        "Hatalski",
                        "Error"});
#line 75
 testRunner.Then("I should have the result as follows", ((string)(null)), table16, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Error Code"});
            table17.AddRow(new string[] {
                        "Email",
                        "UserEmailInvalid"});
#line 78
 testRunner.And("the signup view model should have following errors", ((string)(null)), table17, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Password Confirm does not match")]
        public virtual void PasswordConfirmDoesNotMatch()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Password Confirm does not match", ((string[])(null)));
#line 82
this.ScenarioSetup(scenarioInfo);
#line 83
 testRunner.Given("I have not been authenticated yet", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Email",
                        "Password",
                        "Password Confirm",
                        "First Name",
                        "Last Name"});
            table18.AddRow(new string[] {
                        "hautama@tut.by",
                        "ruinruin",
                        "ruinruin1",
                        "Vitali",
                        "Hatalski"});
#line 84
 testRunner.When("I fill sign up form with the following data", ((string)(null)), table18, "When ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Email",
                        "First Name",
                        "Last Name",
                        "Message Type"});
            table19.AddRow(new string[] {
                        "hautama@tut.by",
                        "Vitali",
                        "Hatalski",
                        "Error"});
#line 87
 testRunner.Then("I should have the result as follows", ((string)(null)), table19, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Error Code"});
            table20.AddRow(new string[] {
                        "PasswordConfirm",
                        "UserPasswordConfirmNotEqual"});
#line 90
 testRunner.And("the signup view model should have following errors", ((string)(null)), table20, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Password length cannot be less than 7 chars")]
        public virtual void PasswordLengthCannotBeLessThan7Chars()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Password length cannot be less than 7 chars", ((string[])(null)));
#line 94
this.ScenarioSetup(scenarioInfo);
#line 95
 testRunner.Given("I have not been authenticated yet", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Email",
                        "Password",
                        "Password Confirm",
                        "First Name",
                        "Last Name"});
            table21.AddRow(new string[] {
                        "hautama@tut.by",
                        "ruin",
                        "ruin",
                        "Vitali",
                        "Hatalski"});
#line 96
 testRunner.When("I fill sign up form with the following data", ((string)(null)), table21, "When ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Email",
                        "First Name",
                        "Last Name",
                        "Message Type"});
            table22.AddRow(new string[] {
                        "hautama@tut.by",
                        "Vitali",
                        "Hatalski",
                        "Error"});
#line 99
 testRunner.Then("I should have the result as follows", ((string)(null)), table22, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Error Code"});
            table23.AddRow(new string[] {
                        "Password",
                        "UserPasswordMinLength"});
#line 102
 testRunner.And("the signup view model should have following errors", ((string)(null)), table23, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Password length cannot be more than 21 chars")]
        public virtual void PasswordLengthCannotBeMoreThan21Chars()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Password length cannot be more than 21 chars", ((string[])(null)));
#line 106
this.ScenarioSetup(scenarioInfo);
#line 107
 testRunner.Given("I have not been authenticated yet", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Email",
                        "Password",
                        "Password Confirm",
                        "First Name",
                        "Last Name"});
            table24.AddRow(new string[] {
                        "hautama@tut.by",
                        "passwordwithmorethan21chars",
                        "passwordwithmorethan21chars",
                        "Vitali",
                        "Hatalski"});
#line 108
 testRunner.When("I fill sign up form with the following data", ((string)(null)), table24, "When ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Email",
                        "First Name",
                        "Last Name",
                        "Message Type"});
            table25.AddRow(new string[] {
                        "hautama@tut.by",
                        "Vitali",
                        "Hatalski",
                        "Error"});
#line 111
 testRunner.Then("I should have the result as follows", ((string)(null)), table25, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Error Code"});
            table26.AddRow(new string[] {
                        "Password",
                        "UserPasswordMaxLength"});
#line 114
 testRunner.And("the signup view model should have following errors", ((string)(null)), table26, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Password is required and Password Confirm does not match")]
        public virtual void PasswordIsRequiredAndPasswordConfirmDoesNotMatch()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Password is required and Password Confirm does not match", ((string[])(null)));
#line 118
this.ScenarioSetup(scenarioInfo);
#line 119
 testRunner.Given("I have not been authenticated yet", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Email",
                        "Password",
                        "Password Confirm",
                        "First Name",
                        "Last Name"});
            table27.AddRow(new string[] {
                        "hautama@tut.by",
                        "",
                        "ruinruin",
                        "Vitali",
                        "Hatalski"});
#line 120
 testRunner.When("I fill sign up form with the following data", ((string)(null)), table27, "When ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Email",
                        "First Name",
                        "Last Name",
                        "Message Type"});
            table28.AddRow(new string[] {
                        "hautama@tut.by",
                        "Vitali",
                        "Hatalski",
                        "Error"});
#line 123
 testRunner.Then("I should have the result as follows", ((string)(null)), table28, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Property",
                        "Error Code"});
            table29.AddRow(new string[] {
                        "Password",
                        "UserPasswordRequired"});
            table29.AddRow(new string[] {
                        "PasswordConfirm",
                        "UserPasswordConfirmNotEqual"});
#line 126
 testRunner.And("the signup view model should have following errors", ((string)(null)), table29, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
