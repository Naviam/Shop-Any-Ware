// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.17929
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TdService.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("AddDeliveryAddress")]
    public partial class AddDeliveryAddressFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "AddDeliveryAddress.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "AddDeliveryAddress", "In order to choose delivery address for my packages\r\nAs a shopper\r\nI want to be a" +
                    "ble to add my delivery address", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Adding valid delivery addresses")]
        [NUnit.Framework.CategoryAttribute("address")]
        public virtual void AddingValidDeliveryAddresses()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding valid delivery addresses", new string[] {
                        "address"});
#line 8
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "FirstName",
                        "LastName",
                        "AddressName",
                        "AddressLine1",
                        "AddressLine2",
                        "AddressLine3",
                        "City",
                        "Country",
                        "State",
                        "Region",
                        "ZipCode",
                        "Phone"});
            table1.AddRow(new string[] {
                        "0",
                        "Vitali",
                        "Hatalski",
                        "My first",
                        "Nekrasova 8",
                        "flat 14",
                        "",
                        "Minsk",
                        "Belarus",
                        "",
                        "",
                        "220040",
                        ""});
            table1.AddRow(new string[] {
                        "0",
                        "Vitali",
                        "Hatalski",
                        "My second",
                        "Novovilenskaya 10",
                        "flat 41",
                        "",
                        "Minsk",
                        "Belarus",
                        "",
                        "",
                        "220053",
                        "+375295067630"});
#line 9
 testRunner.Given("I have entered the following delivery addresses", ((string)(null)), table1, "Given ");
#line 13
 testRunner.When("addresses go to conroller", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "FirstName",
                        "LastName",
                        "AddressName",
                        "AddressLine1",
                        "AddressLine2",
                        "AddressLine3",
                        "City",
                        "Country",
                        "State",
                        "Region",
                        "ZipCode",
                        "Phone"});
            table2.AddRow(new string[] {
                        "1",
                        "Vitali",
                        "Hatalski",
                        "My first",
                        "Nekrasova 8",
                        "flat 14",
                        "",
                        "Minsk",
                        "Belarus",
                        "",
                        "",
                        "220040",
                        ""});
            table2.AddRow(new string[] {
                        "2",
                        "Vitali",
                        "Hatalski",
                        "My second",
                        "Novovilenskaya 10",
                        "flat 41",
                        "",
                        "Minsk",
                        "Belarus",
                        "",
                        "",
                        "220053",
                        "+375295067630"});
#line 14
 testRunner.Then("the result should be as the following", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
