// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.17929
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TdService.ShopAnyWare.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Package Items")]
    [NUnit.Framework.CategoryAttribute("packages")]
    public partial class PackageItemsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "PackageItems.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Package Items", "In order to consolidate package and calculate total package cost\r\nAs a shopper\r\nI" +
                    " want to be able to put and remove items from package", ProgrammingLanguage.CSharp, new string[] {
                        "packages"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Move order items in bulk to existing package")]
        public virtual void MoveOrderItemsInBulkToExistingPackage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Move order items in bulk to existing package", ((string[])(null)));
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("there is \'v.hatalski@gmail.com\' account with \'ruinruin\' password in role \'Shopper" +
                    "\' with fullname \'Vitali\' and \'Hatalski\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.And("I am authenticated as \'v.hatalski@gmail.com\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Retailer",
                        "Order Number",
                        "Tracking Number",
                        "Status"});
            table1.AddRow(new string[] {
                        "amazon.com",
                        "1234567890",
                        "773456789012345",
                        "Received"});
#line 10
 testRunner.And("I have the following orders", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Quantity",
                        "Price"});
            table2.AddRow(new string[] {
                        "IPAD3",
                        "1",
                        "780.40"});
            table2.AddRow(new string[] {
                        "Kindle",
                        "5",
                        "130.95"});
#line 13
 testRunner.And("there are following items for order \'1234567890\' in database", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Delivery Address Id",
                        "Status"});
            table3.AddRow(new string[] {
                        "my first package",
                        "1",
                        "New"});
#line 17
 testRunner.And("I have the following packages", ((string)(null)), table3, "And ");
#line 20
 testRunner.When("I move all items in order \'1234567890\' to package \'my first package\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Quantity",
                        "Price"});
            table4.AddRow(new string[] {
                        "IPAD3",
                        "1",
                        "780.40"});
            table4.AddRow(new string[] {
                        "Kindle",
                        "5",
                        "130.95"});
#line 21
 testRunner.Then("there should be following items for this package", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Move order items in bulk to non-existent package")]
        public virtual void MoveOrderItemsInBulkToNon_ExistentPackage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Move order items in bulk to non-existent package", ((string[])(null)));
#line 27
this.ScenarioSetup(scenarioInfo);
#line 28
 testRunner.Given("there is \'v.hatalski@gmail.com\' account with \'ruinruin\' password in role \'Shopper" +
                    "\' with fullname \'Vitali\' and \'Hatalski\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 29
 testRunner.And("I am authenticated as \'v.hatalski@gmail.com\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Retailer",
                        "Order Number",
                        "Tracking Number",
                        "Status"});
            table5.AddRow(new string[] {
                        "amazon.com",
                        "1234567890",
                        "773456789012345",
                        "Received"});
#line 30
 testRunner.And("I have the following orders", ((string)(null)), table5, "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Quantity",
                        "Price"});
            table6.AddRow(new string[] {
                        "IPAD3",
                        "1",
                        "780.40"});
            table6.AddRow(new string[] {
                        "Kindle",
                        "5",
                        "130.95"});
#line 33
 testRunner.And("there are following items for order \'1234567890\' in database", ((string)(null)), table6, "And ");
#line 37
 testRunner.When("I move all items in order \'1234567890\' to new package \'new package 1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Status"});
            table7.AddRow(new string[] {
                        "new package 1",
                        "New"});
#line 38
 testRunner.Then("There should  be a package with following data", ((string)(null)), table7, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Quantity",
                        "Price"});
            table8.AddRow(new string[] {
                        "IPAD3",
                        "1",
                        "780.40"});
            table8.AddRow(new string[] {
                        "Kindle",
                        "5",
                        "130.95"});
#line 41
 testRunner.And("there should be following items for this package", ((string)(null)), table8, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Move package items in bulk back to their original order")]
        public virtual void MovePackageItemsInBulkBackToTheirOriginalOrder()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Move package items in bulk back to their original order", ((string[])(null)));
#line 46
this.ScenarioSetup(scenarioInfo);
#line 47
 testRunner.Given("there is \'v.hatalski@gmail.com\' account with \'ruinruin\' password in role \'Shopper" +
                    "\' with fullname \'Vitali\' and \'Hatalski\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 48
 testRunner.And("I am authenticated as \'v.hatalski@gmail.com\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Retailer",
                        "Order Number",
                        "Tracking Number",
                        "Status"});
            table9.AddRow(new string[] {
                        "amazon.com",
                        "1234567890",
                        "773456789012345",
                        "Received"});
#line 49
 testRunner.And("I have the following orders", ((string)(null)), table9, "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Delivery Address Id",
                        "Status"});
            table10.AddRow(new string[] {
                        "my first package",
                        "1",
                        "New"});
#line 52
 testRunner.And("I have the following packages", ((string)(null)), table10, "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Quantity",
                        "Price",
                        "OrderId"});
            table11.AddRow(new string[] {
                        "IPAD3",
                        "1",
                        "780.40",
                        "1"});
            table11.AddRow(new string[] {
                        "Kindle",
                        "5",
                        "130.95",
                        "1"});
#line 55
 testRunner.And("there are following items for package \'my first package\' in database", ((string)(null)), table11, "And ");
#line 59
 testRunner.When("I move all items from package \'my first package\' back to their original order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Quantity",
                        "Price"});
            table12.AddRow(new string[] {
                        "IPAD3",
                        "1",
                        "780.40"});
            table12.AddRow(new string[] {
                        "Kindle",
                        "5",
                        "130.95"});
#line 60
 testRunner.Then("there should be following items for order \'1234567890\'", ((string)(null)), table12, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
