// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.17929
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TdService.ShopAnyWare.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Deposit")]
    [NUnit.Framework.CategoryAttribute("paypal")]
    public partial class DepositFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Deposit.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Deposit", "In order to buy services from SAW\r\nAs a shopper\r\nI want to be able to make a depo" +
                    "sit via my credit card", ProgrammingLanguage.CSharp, new string[] {
                        "paypal"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Make a deposit witch a CC via PayPal sandbox")]
        [NUnit.Framework.CategoryAttribute("DoDirectPayment")]
        [NUnit.Framework.CategoryAttribute("sandbox")]
        public virtual void MakeADepositWitchACCViaPayPalSandbox()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make a deposit witch a CC via PayPal sandbox", new string[] {
                        "DoDirectPayment",
                        "sandbox"});
#line 8
this.ScenarioSetup(scenarioInfo);
#line 9
 testRunner.Given("there is \'kotg@bk.ru\' account with \'123456\' password in role \'Shoper\' with fullna" +
                    "me \'kotg\' and \'kotg\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 10
 testRunner.And("I am authenticated as \'kotg@bk.ru\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
 testRunner.And("my current wallet  amount is 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "First Name",
                        "Last Name",
                        "Credit Card Number",
                        "CVV2",
                        "Exp Year",
                        "Exp Month",
                        "Amount"});
            table1.AddRow(new string[] {
                        "Test",
                        "Test",
                        "4534674555592087",
                        "111",
                        "2017",
                        "11",
                        "1"});
#line 12
 testRunner.And("I enter the following CC info on the deposit page", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Result"});
            table2.AddRow(new string[] {
                        "Success"});
#line 15
 testRunner.Then("the DoDirectPayment responce should be as follows", ((string)(null)), table2, "Then ");
#line 18
 testRunner.And("my current wallet  amount should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Operation Amount",
                        "Transaction Status"});
            table3.AddRow(new string[] {
                        "1",
                        "Success"});
#line 19
 testRunner.And("there should be a transaction for me as follows", ((string)(null)), table3, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Make a deposit witch a CC via PayPal sandbox with incorrect payment data")]
        [NUnit.Framework.CategoryAttribute("DoDirectPayment")]
        [NUnit.Framework.CategoryAttribute("sandbox")]
        public virtual void MakeADepositWitchACCViaPayPalSandboxWithIncorrectPaymentData()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Make a deposit witch a CC via PayPal sandbox with incorrect payment data", new string[] {
                        "DoDirectPayment",
                        "sandbox"});
#line 24
this.ScenarioSetup(scenarioInfo);
#line 25
 testRunner.Given("there is \'kotg@bk.ru\' account with \'123456\' password in role \'Shoper\' with fullna" +
                    "me \'kotg\' and \'kotg\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 26
 testRunner.And("I am authenticated as \'kotg@bk.ru\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 27
 testRunner.And("my current wallet  amount is 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "First Name",
                        "Last Name",
                        "Credit Card Number",
                        "CVV2",
                        "Exp Year",
                        "Exp Month",
                        "Amount"});
            table4.AddRow(new string[] {
                        "Test",
                        "Test",
                        "4534674555591111",
                        "111",
                        "2011",
                        "12",
                        "1"});
#line 28
 testRunner.And("I enter the following CC info on the deposit page", ((string)(null)), table4, "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Result"});
            table5.AddRow(new string[] {
                        "Error"});
#line 31
 testRunner.Then("the DoDirectPayment responce should be as follows", ((string)(null)), table5, "Then ");
#line 34
 testRunner.And("my current wallet  amount should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Operation Amount",
                        "Transaction Status"});
            table6.AddRow(new string[] {
                        "1",
                        "Error"});
#line 35
 testRunner.And("there should be a transaction for me as follows", ((string)(null)), table6, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
