// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.17929
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TdService.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Operator Orders")]
    [NUnit.Framework.CategoryAttribute("orders")]
    public partial class OperatorOrdersFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "OperatorOrders.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Operator Orders", "In order to let shopper know about received orders\r\nAs an operator\r\nI want to be " +
                    "able to update new orders with order number and tracking number", ProgrammingLanguage.CSharp, new string[] {
                        "orders"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("View all orders in status New in a separate tab")]
        [NUnit.Framework.CategoryAttribute("vieworders")]
        public virtual void ViewAllOrdersInStatusNewInASeparateTab()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("View all orders in status New in a separate tab", new string[] {
                        "vieworders"});
#line 8
this.ScenarioSetup(scenarioInfo);
#line 9
 testRunner.Given("there is \'v.hatalski@gmail.com\' account with \'ruinruin\' password in role \'Operato" +
                    "r\' with fullname \'Vitali\' and \'Hatalski\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 10
 testRunner.And("I am authenticated as \'v.hatalski@gmail.com\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Retailer",
                        "Order Number",
                        "Tracking Number",
                        "Status"});
            table1.AddRow(new string[] {
                        "1",
                        "amazon.com",
                        "",
                        "773456789012345",
                        "New"});
            table1.AddRow(new string[] {
                        "2",
                        "6pm.com",
                        "123453453455",
                        "673456789012345",
                        "Received"});
            table1.AddRow(new string[] {
                        "3",
                        "zazzle.com",
                        "125675575445",
                        "344567895675664",
                        "Returned"});
            table1.AddRow(new string[] {
                        "4",
                        "yoox.com",
                        "455367456655",
                        "34567893442345",
                        "Disposed"});
            table1.AddRow(new string[] {
                        "5",
                        "zappos.com",
                        "234345454433",
                        "123456789012345",
                        "Received"});
            table1.AddRow(new string[] {
                        "6",
                        "zappos.com",
                        "453656457544",
                        "245763453445463",
                        "ReturnRequested"});
#line 11
 testRunner.And("there are following orders in database", ((string)(null)), table1, "And ");
#line 19
 testRunner.When("I go to new orders tab on operator dashboard page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Retailer Url",
                        "Order Number",
                        "Tracking Number",
                        "Status",
                        "Message Type"});
            table2.AddRow(new string[] {
                        "1",
                        "amazon.com",
                        "",
                        "773456789012345",
                        "New",
                        "Success"});
#line 20
 testRunner.Then("the order view models should be as follows", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("View all orders in status Received in a separate tab")]
        [NUnit.Framework.CategoryAttribute("vieworders")]
        public virtual void ViewAllOrdersInStatusReceivedInASeparateTab()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("View all orders in status Received in a separate tab", new string[] {
                        "vieworders"});
#line 25
this.ScenarioSetup(scenarioInfo);
#line 26
 testRunner.Given("there is \'v.hatalski@gmail.com\' account with \'ruinruin\' password in role \'Operato" +
                    "r\' with fullname \'Vitali\' and \'Hatalski\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 27
 testRunner.And("I am authenticated as \'v.hatalski@gmail.com\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Retailer",
                        "Order Number",
                        "Tracking Number",
                        "Status"});
            table3.AddRow(new string[] {
                        "1",
                        "amazon.com",
                        "",
                        "773456789012345",
                        "New"});
            table3.AddRow(new string[] {
                        "2",
                        "6pm.com",
                        "123453453455",
                        "673456789012345",
                        "Received"});
            table3.AddRow(new string[] {
                        "3",
                        "zazzle.com",
                        "125675575445",
                        "344567895675664",
                        "Returned"});
            table3.AddRow(new string[] {
                        "4",
                        "yoox.com",
                        "455367456655",
                        "34567893442345",
                        "Disposed"});
            table3.AddRow(new string[] {
                        "5",
                        "zappos.com",
                        "234345454433",
                        "123456789012345",
                        "Received"});
            table3.AddRow(new string[] {
                        "6",
                        "zappos.com",
                        "453656457544",
                        "245763453445463",
                        "ReturnRequested"});
#line 28
 testRunner.And("there are following orders in database", ((string)(null)), table3, "And ");
#line 36
 testRunner.When("I go to received orders tab on operator dashboard page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Retailer Url",
                        "Order Number",
                        "Tracking Number",
                        "Status",
                        "Message Type"});
            table4.AddRow(new string[] {
                        "2",
                        "6pm.com",
                        "123453453455",
                        "673456789012345",
                        "Received",
                        "Success"});
            table4.AddRow(new string[] {
                        "5",
                        "zappos.com",
                        "234345454433",
                        "123456789012345",
                        "Received",
                        "Success"});
#line 37
 testRunner.Then("the order view models should be as follows", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("View all orders in status ReturnRequested in a separate tab")]
        [NUnit.Framework.CategoryAttribute("vieworders")]
        public virtual void ViewAllOrdersInStatusReturnRequestedInASeparateTab()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("View all orders in status ReturnRequested in a separate tab", new string[] {
                        "vieworders"});
#line 43
this.ScenarioSetup(scenarioInfo);
#line 44
 testRunner.Given("there is \'v.hatalski@gmail.com\' account with \'ruinruin\' password in role \'Operato" +
                    "r\' with fullname \'Vitali\' and \'Hatalski\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 45
 testRunner.And("I am authenticated as \'v.hatalski@gmail.com\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Retailer",
                        "Order Number",
                        "Tracking Number",
                        "Status"});
            table5.AddRow(new string[] {
                        "1",
                        "amazon.com",
                        "",
                        "773456789012345",
                        "New"});
            table5.AddRow(new string[] {
                        "2",
                        "6pm.com",
                        "123453453455",
                        "673456789012345",
                        "Received"});
            table5.AddRow(new string[] {
                        "3",
                        "zazzle.com",
                        "125675575445",
                        "344567895675664",
                        "Returned"});
            table5.AddRow(new string[] {
                        "4",
                        "yoox.com",
                        "455367456655",
                        "34567893442345",
                        "Disposed"});
            table5.AddRow(new string[] {
                        "5",
                        "zappos.com",
                        "234345454433",
                        "123456789012345",
                        "Received"});
            table5.AddRow(new string[] {
                        "6",
                        "zappos.com",
                        "453656457544",
                        "245763453445463",
                        "ReturnRequested"});
#line 46
 testRunner.And("there are following orders in database", ((string)(null)), table5, "And ");
#line 54
 testRunner.When("I go to return requested orders tab on operator dashboard page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Retailer Url",
                        "Order Number",
                        "Tracking Number",
                        "Status",
                        "Message Type"});
            table6.AddRow(new string[] {
                        "6",
                        "zappos.com",
                        "453656457544",
                        "245763453445463",
                        "ReturnRequested",
                        "Success"});
#line 55
 testRunner.Then("the order view models should be as follows", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add new order should not be possible by operator")]
        [NUnit.Framework.CategoryAttribute("addorder")]
        public virtual void AddNewOrderShouldNotBePossibleByOperator()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add new order should not be possible by operator", new string[] {
                        "addorder"});
#line 60
this.ScenarioSetup(scenarioInfo);
#line 61
 testRunner.Given("there is \'v.hatalski@gmail.com\' account with \'ruinruin\' password in role \'Operato" +
                    "r\' with fullname \'Vitali\' and \'Hatalski\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 62
 testRunner.And("I am authenticated as \'v.hatalski@gmail.com\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 63
 testRunner.When("I set retailer url as \'amazon.com\' and press add order button on shopper dashboar" +
                    "d page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Retailer Url",
                        "Order Number",
                        "Tracking Number",
                        "Received Date",
                        "Status",
                        "Message Type",
                        "Error Code"});
            table7.AddRow(new string[] {
                        "0",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "Error",
                        "OrderCannotBeAddedByYou"});
#line 64
 testRunner.Then("the order view model should be as follows", ((string)(null)), table7, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update order in new status should be possible by operator")]
        [NUnit.Framework.CategoryAttribute("updateorder")]
        public virtual void UpdateOrderInNewStatusShouldBePossibleByOperator()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update order in new status should be possible by operator", new string[] {
                        "updateorder"});
#line 69
this.ScenarioSetup(scenarioInfo);
#line 70
 testRunner.Given("there is \'v.hatalski@gmail.com\' account with \'ruinruin\' password in role \'Operato" +
                    "r\' with fullname \'Vitali\' and \'Hatalski\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 71
 testRunner.And("I am authenticated as \'v.hatalski@gmail.com\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Retailer",
                        "Order Number",
                        "Tracking Number",
                        "Status"});
            table8.AddRow(new string[] {
                        "1",
                        "amazon.com",
                        "",
                        "123456789012345",
                        "New"});
#line 72
 testRunner.And("I have the following orders", ((string)(null)), table8, "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Order Number",
                        "Tracking Number",
                        "Status"});
            table9.AddRow(new string[] {
                        "1",
                        "098765432109",
                        "1234",
                        "New"});
#line 75
 testRunner.When("I update order as follows", ((string)(null)), table9, "When ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Order Number",
                        "Tracking Number",
                        "Status",
                        "Message Type"});
            table10.AddRow(new string[] {
                        "1",
                        "098765432109",
                        "1234",
                        "New",
                        "Success"});
#line 78
 testRunner.Then("the order view model should be as follows", ((string)(null)), table10, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Remove order should not be possible by operator")]
        [NUnit.Framework.CategoryAttribute("removeorder")]
        public virtual void RemoveOrderShouldNotBePossibleByOperator()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Remove order should not be possible by operator", new string[] {
                        "removeorder"});
#line 83
this.ScenarioSetup(scenarioInfo);
#line 84
 testRunner.Given("there is \'v.hatalski@gmail.com\' account with \'ruinruin\' password in role \'Operato" +
                    "r\' with fullname \'Vitali\' and \'Hatalski\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 85
 testRunner.And("I am authenticated as \'v.hatalski@gmail.com\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Retailer",
                        "Order Number",
                        "Tracking Number",
                        "Received Date",
                        "Status"});
            table11.AddRow(new string[] {
                        "1",
                        "amazon.com",
                        "",
                        "",
                        "",
                        "New"});
#line 86
 testRunner.And("I have the following orders", ((string)(null)), table11, "And ");
#line 89
 testRunner.When("I remove order with id \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Retailer Url",
                        "Order Number",
                        "Tracking Number",
                        "Received Date",
                        "Status",
                        "Message Type",
                        "Error Code"});
            table12.AddRow(new string[] {
                        "1",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "Error",
                        "OrderCannotBeRemoved"});
#line 90
 testRunner.Then("the order view model should be as follows", ((string)(null)), table12, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
